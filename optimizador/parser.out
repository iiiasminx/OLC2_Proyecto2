Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    cadena
    cambiolinea
    char
    comentario
    float64
    intpunto
    println
    tab

Grammar

Rule 0     S' -> INICIO
Rule 1     INICIO -> INSTRUCCIONES
Rule 2     INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION
Rule 3     INSTRUCCIONES -> INSTRUCCION
Rule 4     INSTRUCCION -> INICIOSALTO
Rule 5     INSTRUCCION -> INICIOGOTO
Rule 6     INSTRUCCION -> CREARIF
Rule 7     INSTRUCCION -> ASIGNACION
Rule 8     INSTRUCCION -> IMPRESION
Rule 9     INSTRUCCION -> LLAMADAMETODO
Rule 10    INSTRUCCION -> METODO
Rule 11    INICIOSALTO -> salto dospuntos
Rule 12    INICIOGOTO -> goto salto puntocoma
Rule 13    CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
Rule 14    ASIGNACION -> LADO igual LADO puntocoma
Rule 15    IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
Rule 16    LLAMADAMETODO -> id parentesisa parentesisc puntocoma
Rule 17    METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
Rule 18    METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
Rule 19    ICHAR -> int parentesisa DER parentesisc
Rule 20    ICHAR -> IZQ
Rule 21    TIPOCHAR -> impc
Rule 22    TIPOCHAR -> impd
Rule 23    TIPOCHAR -> impf
Rule 24    LADO -> OPERACION
Rule 25    LADO -> GETSTACK
Rule 26    LADO -> GETHEAP
Rule 27    LADO -> DER
Rule 28    OPERACION -> DER OP DER
Rule 29    DER -> IZQ
Rule 30    DER -> h
Rule 31    DER -> p
Rule 32    GETSTACK -> stack corchetea int parentesisa DER parentesisc corchetec
Rule 33    GETHEAP -> heap corchetea int parentesisa DER parentesisc corchetec
Rule 34    IZQ -> int
Rule 35    IZQ -> temporal
Rule 36    IZQ -> flotante
Rule 37    IZQ -> NEG
Rule 38    SIMBOLO -> mayorque
Rule 39    SIMBOLO -> menorque
Rule 40    SIMBOLO -> mayoriwal
Rule 41    SIMBOLO -> menoriwal
Rule 42    SIMBOLO -> iwaliwal
Rule 43    SIMBOLO -> distintoque
Rule 44    SIMBOLO -> and
Rule 45    SIMBOLO -> or
Rule 46    OP -> mas
Rule 47    OP -> menos
Rule 48    OP -> asterisco
Rule 49    OP -> dividido
Rule 50    OP -> modulo
Rule 51    NEG -> menos int
Rule 52    NEG -> menos flotante

Terminals, with rules where they appear

and                  : 44
asterisco            : 48
cadena               : 
cambiolinea          : 
char                 : 
coma                 : 15
comentario           : 
corchetea            : 32 33
corchetec            : 32 33
distintoque          : 43
dividido             : 49
dospuntos            : 11
error                : 
float64              : 
flotante             : 36 52
fmt                  : 15
func                 : 17 18
goto                 : 12 13
h                    : 30
heap                 : 33
id                   : 16 17
if                   : 13
igual                : 14
impc                 : 21
impd                 : 22
impf                 : 23
int                  : 19 32 33 34 51
intpunto             : 
iwaliwal             : 42
llavesa              : 13 17 18
llavesc              : 13 17 18
main                 : 18
mas                  : 46
mayoriwal            : 40
mayorque             : 38
menoriwal            : 41
menorque             : 39
menos                : 47 51 52
modulo               : 50
or                   : 45
p                    : 31
parentesisa          : 13 15 16 17 18 19 32 33
parentesisc          : 13 15 16 17 18 19 32 33
printf               : 15
println              : 
punto                : 15
puntocoma            : 12 14 15 16 17
return               : 17
salto                : 11 12 13
stack                : 32
tab                  : 
temporal             : 35

Nonterminals, with rules where they appear

ASIGNACION           : 7
CREARIF              : 6
DER                  : 19 27 28 28 32 33
GETHEAP              : 26
GETSTACK             : 25
ICHAR                : 15
IMPRESION            : 8
INICIO               : 0
INICIOGOTO           : 5
INICIOSALTO          : 4
INSTRUCCION          : 2 3
INSTRUCCIONES        : 1 2 17 18
IZQ                  : 13 13 20 29
LADO                 : 14 14
LLAMADAMETODO        : 9
METODO               : 10
NEG                  : 37
OP                   : 28
OPERACION            : 24
SIMBOLO              : 13
TIPOCHAR             : 15

Parsing method: LALR

state 0

    (0) S' -> . INICIO
    (1) INICIO -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INICIO                         shift and go to state 1
    INSTRUCCIONES                  shift and go to state 2
    INSTRUCCION                    shift and go to state 3
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 1

    (0) S' -> INICIO .



state 2

    (1) INICIO -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    $end            reduce using rule 1 (INICIO -> INSTRUCCIONES .)
    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INSTRUCCION                    shift and go to state 32
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 3

    (3) INSTRUCCIONES -> INSTRUCCION .

    salto           reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    goto            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    if              reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    fmt             reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    id              reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    func            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    stack           reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    heap            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    h               reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    p               reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    int             reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    temporal        reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    flotante        reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    menos           reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    $end            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    return          reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    llavesc         reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)


state 4

    (4) INSTRUCCION -> INICIOSALTO .

    salto           reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    goto            reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    if              reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    fmt             reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    id              reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    func            reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    stack           reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    heap            reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    h               reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    p               reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    int             reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    temporal        reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    flotante        reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    menos           reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    $end            reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    return          reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)
    llavesc         reduce using rule 4 (INSTRUCCION -> INICIOSALTO .)


state 5

    (5) INSTRUCCION -> INICIOGOTO .

    salto           reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    goto            reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    if              reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    fmt             reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    id              reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    func            reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    stack           reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    heap            reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    h               reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    p               reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    int             reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    temporal        reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    flotante        reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    menos           reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    $end            reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    return          reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)
    llavesc         reduce using rule 5 (INSTRUCCION -> INICIOGOTO .)


state 6

    (6) INSTRUCCION -> CREARIF .

    salto           reduce using rule 6 (INSTRUCCION -> CREARIF .)
    goto            reduce using rule 6 (INSTRUCCION -> CREARIF .)
    if              reduce using rule 6 (INSTRUCCION -> CREARIF .)
    fmt             reduce using rule 6 (INSTRUCCION -> CREARIF .)
    id              reduce using rule 6 (INSTRUCCION -> CREARIF .)
    func            reduce using rule 6 (INSTRUCCION -> CREARIF .)
    stack           reduce using rule 6 (INSTRUCCION -> CREARIF .)
    heap            reduce using rule 6 (INSTRUCCION -> CREARIF .)
    h               reduce using rule 6 (INSTRUCCION -> CREARIF .)
    p               reduce using rule 6 (INSTRUCCION -> CREARIF .)
    int             reduce using rule 6 (INSTRUCCION -> CREARIF .)
    temporal        reduce using rule 6 (INSTRUCCION -> CREARIF .)
    flotante        reduce using rule 6 (INSTRUCCION -> CREARIF .)
    menos           reduce using rule 6 (INSTRUCCION -> CREARIF .)
    $end            reduce using rule 6 (INSTRUCCION -> CREARIF .)
    return          reduce using rule 6 (INSTRUCCION -> CREARIF .)
    llavesc         reduce using rule 6 (INSTRUCCION -> CREARIF .)


state 7

    (7) INSTRUCCION -> ASIGNACION .

    salto           reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    goto            reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    if              reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    fmt             reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    id              reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    func            reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    stack           reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    heap            reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    h               reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    p               reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    int             reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    temporal        reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    flotante        reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    menos           reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    $end            reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    return          reduce using rule 7 (INSTRUCCION -> ASIGNACION .)
    llavesc         reduce using rule 7 (INSTRUCCION -> ASIGNACION .)


state 8

    (8) INSTRUCCION -> IMPRESION .

    salto           reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    goto            reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    if              reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    fmt             reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    id              reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    func            reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    stack           reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    heap            reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    h               reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    p               reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    int             reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    temporal        reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    flotante        reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    menos           reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    $end            reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    return          reduce using rule 8 (INSTRUCCION -> IMPRESION .)
    llavesc         reduce using rule 8 (INSTRUCCION -> IMPRESION .)


state 9

    (9) INSTRUCCION -> LLAMADAMETODO .

    salto           reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    goto            reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    if              reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    fmt             reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    id              reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    func            reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    stack           reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    heap            reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    h               reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    p               reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    int             reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    temporal        reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    flotante        reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    menos           reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    $end            reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    return          reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)
    llavesc         reduce using rule 9 (INSTRUCCION -> LLAMADAMETODO .)


state 10

    (10) INSTRUCCION -> METODO .

    salto           reduce using rule 10 (INSTRUCCION -> METODO .)
    goto            reduce using rule 10 (INSTRUCCION -> METODO .)
    if              reduce using rule 10 (INSTRUCCION -> METODO .)
    fmt             reduce using rule 10 (INSTRUCCION -> METODO .)
    id              reduce using rule 10 (INSTRUCCION -> METODO .)
    func            reduce using rule 10 (INSTRUCCION -> METODO .)
    stack           reduce using rule 10 (INSTRUCCION -> METODO .)
    heap            reduce using rule 10 (INSTRUCCION -> METODO .)
    h               reduce using rule 10 (INSTRUCCION -> METODO .)
    p               reduce using rule 10 (INSTRUCCION -> METODO .)
    int             reduce using rule 10 (INSTRUCCION -> METODO .)
    temporal        reduce using rule 10 (INSTRUCCION -> METODO .)
    flotante        reduce using rule 10 (INSTRUCCION -> METODO .)
    menos           reduce using rule 10 (INSTRUCCION -> METODO .)
    $end            reduce using rule 10 (INSTRUCCION -> METODO .)
    return          reduce using rule 10 (INSTRUCCION -> METODO .)
    llavesc         reduce using rule 10 (INSTRUCCION -> METODO .)


state 11

    (11) INICIOSALTO -> salto . dospuntos

    dospuntos       shift and go to state 33


state 12

    (12) INICIOGOTO -> goto . salto puntocoma

    salto           shift and go to state 34


state 13

    (13) CREARIF -> if . parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc

    parentesisa     shift and go to state 35


state 14

    (29) DER -> IZQ .

    mas             reduce using rule 29 (DER -> IZQ .)
    menos           reduce using rule 29 (DER -> IZQ .)
    asterisco       reduce using rule 29 (DER -> IZQ .)
    dividido        reduce using rule 29 (DER -> IZQ .)
    modulo          reduce using rule 29 (DER -> IZQ .)
    igual           reduce using rule 29 (DER -> IZQ .)
    puntocoma       reduce using rule 29 (DER -> IZQ .)
    parentesisc     reduce using rule 29 (DER -> IZQ .)


state 15

    (14) ASIGNACION -> LADO . igual LADO puntocoma

    igual           shift and go to state 36


state 16

    (15) IMPRESION -> fmt . punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma

    punto           shift and go to state 37


state 17

    (16) LLAMADAMETODO -> id . parentesisa parentesisc puntocoma

    parentesisa     shift and go to state 38


state 18

    (17) METODO -> func . id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> func . main parentesisa parentesisc llavesa INSTRUCCIONES llavesc

    id              shift and go to state 39
    main            shift and go to state 40


state 19

    (24) LADO -> OPERACION .

    igual           reduce using rule 24 (LADO -> OPERACION .)
    puntocoma       reduce using rule 24 (LADO -> OPERACION .)


state 20

    (25) LADO -> GETSTACK .

    igual           reduce using rule 25 (LADO -> GETSTACK .)
    puntocoma       reduce using rule 25 (LADO -> GETSTACK .)


state 21

    (26) LADO -> GETHEAP .

    igual           reduce using rule 26 (LADO -> GETHEAP .)
    puntocoma       reduce using rule 26 (LADO -> GETHEAP .)


state 22

    (27) LADO -> DER .
    (28) OPERACION -> DER . OP DER
    (46) OP -> . mas
    (47) OP -> . menos
    (48) OP -> . asterisco
    (49) OP -> . dividido
    (50) OP -> . modulo

    igual           reduce using rule 27 (LADO -> DER .)
    puntocoma       reduce using rule 27 (LADO -> DER .)
    mas             shift and go to state 42
    menos           shift and go to state 43
    asterisco       shift and go to state 44
    dividido        shift and go to state 45
    modulo          shift and go to state 46

    OP                             shift and go to state 41

state 23

    (32) GETSTACK -> stack . corchetea int parentesisa DER parentesisc corchetec

    corchetea       shift and go to state 47


state 24

    (34) IZQ -> int .

    mas             reduce using rule 34 (IZQ -> int .)
    menos           reduce using rule 34 (IZQ -> int .)
    asterisco       reduce using rule 34 (IZQ -> int .)
    dividido        reduce using rule 34 (IZQ -> int .)
    modulo          reduce using rule 34 (IZQ -> int .)
    igual           reduce using rule 34 (IZQ -> int .)
    mayorque        reduce using rule 34 (IZQ -> int .)
    menorque        reduce using rule 34 (IZQ -> int .)
    mayoriwal       reduce using rule 34 (IZQ -> int .)
    menoriwal       reduce using rule 34 (IZQ -> int .)
    iwaliwal        reduce using rule 34 (IZQ -> int .)
    distintoque     reduce using rule 34 (IZQ -> int .)
    and             reduce using rule 34 (IZQ -> int .)
    or              reduce using rule 34 (IZQ -> int .)
    puntocoma       reduce using rule 34 (IZQ -> int .)
    parentesisc     reduce using rule 34 (IZQ -> int .)


state 25

    (33) GETHEAP -> heap . corchetea int parentesisa DER parentesisc corchetec

    corchetea       shift and go to state 48


state 26

    (30) DER -> h .

    mas             reduce using rule 30 (DER -> h .)
    menos           reduce using rule 30 (DER -> h .)
    asterisco       reduce using rule 30 (DER -> h .)
    dividido        reduce using rule 30 (DER -> h .)
    modulo          reduce using rule 30 (DER -> h .)
    igual           reduce using rule 30 (DER -> h .)
    puntocoma       reduce using rule 30 (DER -> h .)
    parentesisc     reduce using rule 30 (DER -> h .)


state 27

    (31) DER -> p .

    mas             reduce using rule 31 (DER -> p .)
    menos           reduce using rule 31 (DER -> p .)
    asterisco       reduce using rule 31 (DER -> p .)
    dividido        reduce using rule 31 (DER -> p .)
    modulo          reduce using rule 31 (DER -> p .)
    igual           reduce using rule 31 (DER -> p .)
    puntocoma       reduce using rule 31 (DER -> p .)
    parentesisc     reduce using rule 31 (DER -> p .)


state 28

    (35) IZQ -> temporal .

    mas             reduce using rule 35 (IZQ -> temporal .)
    menos           reduce using rule 35 (IZQ -> temporal .)
    asterisco       reduce using rule 35 (IZQ -> temporal .)
    dividido        reduce using rule 35 (IZQ -> temporal .)
    modulo          reduce using rule 35 (IZQ -> temporal .)
    igual           reduce using rule 35 (IZQ -> temporal .)
    mayorque        reduce using rule 35 (IZQ -> temporal .)
    menorque        reduce using rule 35 (IZQ -> temporal .)
    mayoriwal       reduce using rule 35 (IZQ -> temporal .)
    menoriwal       reduce using rule 35 (IZQ -> temporal .)
    iwaliwal        reduce using rule 35 (IZQ -> temporal .)
    distintoque     reduce using rule 35 (IZQ -> temporal .)
    and             reduce using rule 35 (IZQ -> temporal .)
    or              reduce using rule 35 (IZQ -> temporal .)
    puntocoma       reduce using rule 35 (IZQ -> temporal .)
    parentesisc     reduce using rule 35 (IZQ -> temporal .)


state 29

    (36) IZQ -> flotante .

    mas             reduce using rule 36 (IZQ -> flotante .)
    menos           reduce using rule 36 (IZQ -> flotante .)
    asterisco       reduce using rule 36 (IZQ -> flotante .)
    dividido        reduce using rule 36 (IZQ -> flotante .)
    modulo          reduce using rule 36 (IZQ -> flotante .)
    igual           reduce using rule 36 (IZQ -> flotante .)
    mayorque        reduce using rule 36 (IZQ -> flotante .)
    menorque        reduce using rule 36 (IZQ -> flotante .)
    mayoriwal       reduce using rule 36 (IZQ -> flotante .)
    menoriwal       reduce using rule 36 (IZQ -> flotante .)
    iwaliwal        reduce using rule 36 (IZQ -> flotante .)
    distintoque     reduce using rule 36 (IZQ -> flotante .)
    and             reduce using rule 36 (IZQ -> flotante .)
    or              reduce using rule 36 (IZQ -> flotante .)
    puntocoma       reduce using rule 36 (IZQ -> flotante .)
    parentesisc     reduce using rule 36 (IZQ -> flotante .)


state 30

    (37) IZQ -> NEG .

    mas             reduce using rule 37 (IZQ -> NEG .)
    menos           reduce using rule 37 (IZQ -> NEG .)
    asterisco       reduce using rule 37 (IZQ -> NEG .)
    dividido        reduce using rule 37 (IZQ -> NEG .)
    modulo          reduce using rule 37 (IZQ -> NEG .)
    igual           reduce using rule 37 (IZQ -> NEG .)
    mayorque        reduce using rule 37 (IZQ -> NEG .)
    menorque        reduce using rule 37 (IZQ -> NEG .)
    mayoriwal       reduce using rule 37 (IZQ -> NEG .)
    menoriwal       reduce using rule 37 (IZQ -> NEG .)
    iwaliwal        reduce using rule 37 (IZQ -> NEG .)
    distintoque     reduce using rule 37 (IZQ -> NEG .)
    and             reduce using rule 37 (IZQ -> NEG .)
    or              reduce using rule 37 (IZQ -> NEG .)
    puntocoma       reduce using rule 37 (IZQ -> NEG .)
    parentesisc     reduce using rule 37 (IZQ -> NEG .)


state 31

    (51) NEG -> menos . int
    (52) NEG -> menos . flotante

    int             shift and go to state 49
    flotante        shift and go to state 50


state 32

    (2) INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .

    salto           reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    goto            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    if              reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    fmt             reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    id              reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    func            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    stack           reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    heap            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    h               reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    p               reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    int             reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    temporal        reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    flotante        reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    menos           reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    $end            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    return          reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    llavesc         reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)


state 33

    (11) INICIOSALTO -> salto dospuntos .

    salto           reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    goto            reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    if              reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    fmt             reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    id              reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    func            reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    stack           reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    heap            reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    h               reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    p               reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    int             reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    temporal        reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    flotante        reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    menos           reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    $end            reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    return          reduce using rule 11 (INICIOSALTO -> salto dospuntos .)
    llavesc         reduce using rule 11 (INICIOSALTO -> salto dospuntos .)


state 34

    (12) INICIOGOTO -> goto salto . puntocoma

    puntocoma       shift and go to state 51


state 35

    (13) CREARIF -> if parentesisa . IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    IZQ                            shift and go to state 52
    NEG                            shift and go to state 30

state 36

    (14) ASIGNACION -> LADO igual . LADO puntocoma
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    LADO                           shift and go to state 53
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    IZQ                            shift and go to state 14
    NEG                            shift and go to state 30

state 37

    (15) IMPRESION -> fmt punto . printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma

    printf          shift and go to state 54


state 38

    (16) LLAMADAMETODO -> id parentesisa . parentesisc puntocoma

    parentesisc     shift and go to state 55


state 39

    (17) METODO -> func id . parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc

    parentesisa     shift and go to state 56


state 40

    (18) METODO -> func main . parentesisa parentesisc llavesa INSTRUCCIONES llavesc

    parentesisa     shift and go to state 57


state 41

    (28) OPERACION -> DER OP . DER
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    DER                            shift and go to state 58
    IZQ                            shift and go to state 14
    NEG                            shift and go to state 30

state 42

    (46) OP -> mas .

    h               reduce using rule 46 (OP -> mas .)
    p               reduce using rule 46 (OP -> mas .)
    int             reduce using rule 46 (OP -> mas .)
    temporal        reduce using rule 46 (OP -> mas .)
    flotante        reduce using rule 46 (OP -> mas .)
    menos           reduce using rule 46 (OP -> mas .)


state 43

    (47) OP -> menos .

    h               reduce using rule 47 (OP -> menos .)
    p               reduce using rule 47 (OP -> menos .)
    int             reduce using rule 47 (OP -> menos .)
    temporal        reduce using rule 47 (OP -> menos .)
    flotante        reduce using rule 47 (OP -> menos .)
    menos           reduce using rule 47 (OP -> menos .)


state 44

    (48) OP -> asterisco .

    h               reduce using rule 48 (OP -> asterisco .)
    p               reduce using rule 48 (OP -> asterisco .)
    int             reduce using rule 48 (OP -> asterisco .)
    temporal        reduce using rule 48 (OP -> asterisco .)
    flotante        reduce using rule 48 (OP -> asterisco .)
    menos           reduce using rule 48 (OP -> asterisco .)


state 45

    (49) OP -> dividido .

    h               reduce using rule 49 (OP -> dividido .)
    p               reduce using rule 49 (OP -> dividido .)
    int             reduce using rule 49 (OP -> dividido .)
    temporal        reduce using rule 49 (OP -> dividido .)
    flotante        reduce using rule 49 (OP -> dividido .)
    menos           reduce using rule 49 (OP -> dividido .)


state 46

    (50) OP -> modulo .

    h               reduce using rule 50 (OP -> modulo .)
    p               reduce using rule 50 (OP -> modulo .)
    int             reduce using rule 50 (OP -> modulo .)
    temporal        reduce using rule 50 (OP -> modulo .)
    flotante        reduce using rule 50 (OP -> modulo .)
    menos           reduce using rule 50 (OP -> modulo .)


state 47

    (32) GETSTACK -> stack corchetea . int parentesisa DER parentesisc corchetec

    int             shift and go to state 59


state 48

    (33) GETHEAP -> heap corchetea . int parentesisa DER parentesisc corchetec

    int             shift and go to state 60


state 49

    (51) NEG -> menos int .

    mas             reduce using rule 51 (NEG -> menos int .)
    menos           reduce using rule 51 (NEG -> menos int .)
    asterisco       reduce using rule 51 (NEG -> menos int .)
    dividido        reduce using rule 51 (NEG -> menos int .)
    modulo          reduce using rule 51 (NEG -> menos int .)
    igual           reduce using rule 51 (NEG -> menos int .)
    mayorque        reduce using rule 51 (NEG -> menos int .)
    menorque        reduce using rule 51 (NEG -> menos int .)
    mayoriwal       reduce using rule 51 (NEG -> menos int .)
    menoriwal       reduce using rule 51 (NEG -> menos int .)
    iwaliwal        reduce using rule 51 (NEG -> menos int .)
    distintoque     reduce using rule 51 (NEG -> menos int .)
    and             reduce using rule 51 (NEG -> menos int .)
    or              reduce using rule 51 (NEG -> menos int .)
    puntocoma       reduce using rule 51 (NEG -> menos int .)
    parentesisc     reduce using rule 51 (NEG -> menos int .)


state 50

    (52) NEG -> menos flotante .

    mas             reduce using rule 52 (NEG -> menos flotante .)
    menos           reduce using rule 52 (NEG -> menos flotante .)
    asterisco       reduce using rule 52 (NEG -> menos flotante .)
    dividido        reduce using rule 52 (NEG -> menos flotante .)
    modulo          reduce using rule 52 (NEG -> menos flotante .)
    igual           reduce using rule 52 (NEG -> menos flotante .)
    mayorque        reduce using rule 52 (NEG -> menos flotante .)
    menorque        reduce using rule 52 (NEG -> menos flotante .)
    mayoriwal       reduce using rule 52 (NEG -> menos flotante .)
    menoriwal       reduce using rule 52 (NEG -> menos flotante .)
    iwaliwal        reduce using rule 52 (NEG -> menos flotante .)
    distintoque     reduce using rule 52 (NEG -> menos flotante .)
    and             reduce using rule 52 (NEG -> menos flotante .)
    or              reduce using rule 52 (NEG -> menos flotante .)
    puntocoma       reduce using rule 52 (NEG -> menos flotante .)
    parentesisc     reduce using rule 52 (NEG -> menos flotante .)


state 51

    (12) INICIOGOTO -> goto salto puntocoma .

    salto           reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    goto            reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    if              reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    fmt             reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    id              reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    func            reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    stack           reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    heap            reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    h               reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    p               reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    int             reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    temporal        reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    flotante        reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    menos           reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    $end            reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    return          reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)
    llavesc         reduce using rule 12 (INICIOGOTO -> goto salto puntocoma .)


state 52

    (13) CREARIF -> if parentesisa IZQ . SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (38) SIMBOLO -> . mayorque
    (39) SIMBOLO -> . menorque
    (40) SIMBOLO -> . mayoriwal
    (41) SIMBOLO -> . menoriwal
    (42) SIMBOLO -> . iwaliwal
    (43) SIMBOLO -> . distintoque
    (44) SIMBOLO -> . and
    (45) SIMBOLO -> . or

    mayorque        shift and go to state 62
    menorque        shift and go to state 63
    mayoriwal       shift and go to state 64
    menoriwal       shift and go to state 65
    iwaliwal        shift and go to state 66
    distintoque     shift and go to state 67
    and             shift and go to state 68
    or              shift and go to state 69

    SIMBOLO                        shift and go to state 61

state 53

    (14) ASIGNACION -> LADO igual LADO . puntocoma

    puntocoma       shift and go to state 70


state 54

    (15) IMPRESION -> fmt punto printf . parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma

    parentesisa     shift and go to state 71


state 55

    (16) LLAMADAMETODO -> id parentesisa parentesisc . puntocoma

    puntocoma       shift and go to state 72


state 56

    (17) METODO -> func id parentesisa . parentesisc llavesa INSTRUCCIONES return puntocoma llavesc

    parentesisc     shift and go to state 73


state 57

    (18) METODO -> func main parentesisa . parentesisc llavesa INSTRUCCIONES llavesc

    parentesisc     shift and go to state 74


state 58

    (28) OPERACION -> DER OP DER .

    igual           reduce using rule 28 (OPERACION -> DER OP DER .)
    puntocoma       reduce using rule 28 (OPERACION -> DER OP DER .)


state 59

    (32) GETSTACK -> stack corchetea int . parentesisa DER parentesisc corchetec

    parentesisa     shift and go to state 75


state 60

    (33) GETHEAP -> heap corchetea int . parentesisa DER parentesisc corchetec

    parentesisa     shift and go to state 76


state 61

    (13) CREARIF -> if parentesisa IZQ SIMBOLO . IZQ parentesisc llavesa goto salto llavesc
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    IZQ                            shift and go to state 77
    NEG                            shift and go to state 30

state 62

    (38) SIMBOLO -> mayorque .

    int             reduce using rule 38 (SIMBOLO -> mayorque .)
    temporal        reduce using rule 38 (SIMBOLO -> mayorque .)
    flotante        reduce using rule 38 (SIMBOLO -> mayorque .)
    menos           reduce using rule 38 (SIMBOLO -> mayorque .)


state 63

    (39) SIMBOLO -> menorque .

    int             reduce using rule 39 (SIMBOLO -> menorque .)
    temporal        reduce using rule 39 (SIMBOLO -> menorque .)
    flotante        reduce using rule 39 (SIMBOLO -> menorque .)
    menos           reduce using rule 39 (SIMBOLO -> menorque .)


state 64

    (40) SIMBOLO -> mayoriwal .

    int             reduce using rule 40 (SIMBOLO -> mayoriwal .)
    temporal        reduce using rule 40 (SIMBOLO -> mayoriwal .)
    flotante        reduce using rule 40 (SIMBOLO -> mayoriwal .)
    menos           reduce using rule 40 (SIMBOLO -> mayoriwal .)


state 65

    (41) SIMBOLO -> menoriwal .

    int             reduce using rule 41 (SIMBOLO -> menoriwal .)
    temporal        reduce using rule 41 (SIMBOLO -> menoriwal .)
    flotante        reduce using rule 41 (SIMBOLO -> menoriwal .)
    menos           reduce using rule 41 (SIMBOLO -> menoriwal .)


state 66

    (42) SIMBOLO -> iwaliwal .

    int             reduce using rule 42 (SIMBOLO -> iwaliwal .)
    temporal        reduce using rule 42 (SIMBOLO -> iwaliwal .)
    flotante        reduce using rule 42 (SIMBOLO -> iwaliwal .)
    menos           reduce using rule 42 (SIMBOLO -> iwaliwal .)


state 67

    (43) SIMBOLO -> distintoque .

    int             reduce using rule 43 (SIMBOLO -> distintoque .)
    temporal        reduce using rule 43 (SIMBOLO -> distintoque .)
    flotante        reduce using rule 43 (SIMBOLO -> distintoque .)
    menos           reduce using rule 43 (SIMBOLO -> distintoque .)


state 68

    (44) SIMBOLO -> and .

    int             reduce using rule 44 (SIMBOLO -> and .)
    temporal        reduce using rule 44 (SIMBOLO -> and .)
    flotante        reduce using rule 44 (SIMBOLO -> and .)
    menos           reduce using rule 44 (SIMBOLO -> and .)


state 69

    (45) SIMBOLO -> or .

    int             reduce using rule 45 (SIMBOLO -> or .)
    temporal        reduce using rule 45 (SIMBOLO -> or .)
    flotante        reduce using rule 45 (SIMBOLO -> or .)
    menos           reduce using rule 45 (SIMBOLO -> or .)


state 70

    (14) ASIGNACION -> LADO igual LADO puntocoma .

    salto           reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    goto            reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    if              reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    fmt             reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    id              reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    func            reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    stack           reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    heap            reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    h               reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    p               reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    int             reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    temporal        reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    flotante        reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    menos           reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    $end            reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    return          reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)
    llavesc         reduce using rule 14 (ASIGNACION -> LADO igual LADO puntocoma .)


state 71

    (15) IMPRESION -> fmt punto printf parentesisa . TIPOCHAR coma ICHAR parentesisc puntocoma
    (21) TIPOCHAR -> . impc
    (22) TIPOCHAR -> . impd
    (23) TIPOCHAR -> . impf

    impc            shift and go to state 79
    impd            shift and go to state 80
    impf            shift and go to state 81

    TIPOCHAR                       shift and go to state 78

state 72

    (16) LLAMADAMETODO -> id parentesisa parentesisc puntocoma .

    salto           reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    goto            reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    if              reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    fmt             reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    id              reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    func            reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    stack           reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    heap            reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    h               reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    p               reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    int             reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    temporal        reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    flotante        reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    menos           reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    $end            reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    return          reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)
    llavesc         reduce using rule 16 (LLAMADAMETODO -> id parentesisa parentesisc puntocoma .)


state 73

    (17) METODO -> func id parentesisa parentesisc . llavesa INSTRUCCIONES return puntocoma llavesc

    llavesa         shift and go to state 82


state 74

    (18) METODO -> func main parentesisa parentesisc . llavesa INSTRUCCIONES llavesc

    llavesa         shift and go to state 83


state 75

    (32) GETSTACK -> stack corchetea int parentesisa . DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    DER                            shift and go to state 84
    IZQ                            shift and go to state 14
    NEG                            shift and go to state 30

state 76

    (33) GETHEAP -> heap corchetea int parentesisa . DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    DER                            shift and go to state 85
    IZQ                            shift and go to state 14
    NEG                            shift and go to state 30

state 77

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ . parentesisc llavesa goto salto llavesc

    parentesisc     shift and go to state 86


state 78

    (15) IMPRESION -> fmt punto printf parentesisa TIPOCHAR . coma ICHAR parentesisc puntocoma

    coma            shift and go to state 87


state 79

    (21) TIPOCHAR -> impc .

    coma            reduce using rule 21 (TIPOCHAR -> impc .)


state 80

    (22) TIPOCHAR -> impd .

    coma            reduce using rule 22 (TIPOCHAR -> impd .)


state 81

    (23) TIPOCHAR -> impf .

    coma            reduce using rule 23 (TIPOCHAR -> impf .)


state 82

    (17) METODO -> func id parentesisa parentesisc llavesa . INSTRUCCIONES return puntocoma llavesc
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INSTRUCCIONES                  shift and go to state 88
    INSTRUCCION                    shift and go to state 3
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 83

    (18) METODO -> func main parentesisa parentesisc llavesa . INSTRUCCIONES llavesc
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INSTRUCCIONES                  shift and go to state 89
    INSTRUCCION                    shift and go to state 3
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 84

    (32) GETSTACK -> stack corchetea int parentesisa DER . parentesisc corchetec

    parentesisc     shift and go to state 90


state 85

    (33) GETHEAP -> heap corchetea int parentesisa DER . parentesisc corchetec

    parentesisc     shift and go to state 91


state 86

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc . llavesa goto salto llavesc

    llavesa         shift and go to state 92


state 87

    (15) IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma . ICHAR parentesisc puntocoma
    (19) ICHAR -> . int parentesisa DER parentesisc
    (20) ICHAR -> . IZQ
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    int             shift and go to state 94
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    ICHAR                          shift and go to state 93
    IZQ                            shift and go to state 95
    NEG                            shift and go to state 30

state 88

    (17) METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES . return puntocoma llavesc
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    return          shift and go to state 96
    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INSTRUCCION                    shift and go to state 32
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 89

    (18) METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES . llavesc
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . INICIOSALTO
    (5) INSTRUCCION -> . INICIOGOTO
    (6) INSTRUCCION -> . CREARIF
    (7) INSTRUCCION -> . ASIGNACION
    (8) INSTRUCCION -> . IMPRESION
    (9) INSTRUCCION -> . LLAMADAMETODO
    (10) INSTRUCCION -> . METODO
    (11) INICIOSALTO -> . salto dospuntos
    (12) INICIOGOTO -> . goto salto puntocoma
    (13) CREARIF -> . if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc
    (14) ASIGNACION -> . LADO igual LADO puntocoma
    (15) IMPRESION -> . fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma
    (16) LLAMADAMETODO -> . id parentesisa parentesisc puntocoma
    (17) METODO -> . func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc
    (18) METODO -> . func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc
    (24) LADO -> . OPERACION
    (25) LADO -> . GETSTACK
    (26) LADO -> . GETHEAP
    (27) LADO -> . DER
    (28) OPERACION -> . DER OP DER
    (32) GETSTACK -> . stack corchetea int parentesisa DER parentesisc corchetec
    (33) GETHEAP -> . heap corchetea int parentesisa DER parentesisc corchetec
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    llavesc         shift and go to state 97
    salto           shift and go to state 11
    goto            shift and go to state 12
    if              shift and go to state 13
    fmt             shift and go to state 16
    id              shift and go to state 17
    func            shift and go to state 18
    stack           shift and go to state 23
    heap            shift and go to state 25
    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    INSTRUCCION                    shift and go to state 32
    INICIOSALTO                    shift and go to state 4
    INICIOGOTO                     shift and go to state 5
    CREARIF                        shift and go to state 6
    ASIGNACION                     shift and go to state 7
    IMPRESION                      shift and go to state 8
    LLAMADAMETODO                  shift and go to state 9
    METODO                         shift and go to state 10
    IZQ                            shift and go to state 14
    LADO                           shift and go to state 15
    OPERACION                      shift and go to state 19
    GETSTACK                       shift and go to state 20
    GETHEAP                        shift and go to state 21
    DER                            shift and go to state 22
    NEG                            shift and go to state 30

state 90

    (32) GETSTACK -> stack corchetea int parentesisa DER parentesisc . corchetec

    corchetec       shift and go to state 98


state 91

    (33) GETHEAP -> heap corchetea int parentesisa DER parentesisc . corchetec

    corchetec       shift and go to state 99


state 92

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa . goto salto llavesc

    goto            shift and go to state 100


state 93

    (15) IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR . parentesisc puntocoma

    parentesisc     shift and go to state 101


state 94

    (19) ICHAR -> int . parentesisa DER parentesisc
    (34) IZQ -> int .

    parentesisa     shift and go to state 102
    parentesisc     reduce using rule 34 (IZQ -> int .)


state 95

    (20) ICHAR -> IZQ .

    parentesisc     reduce using rule 20 (ICHAR -> IZQ .)


state 96

    (17) METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return . puntocoma llavesc

    puntocoma       shift and go to state 103


state 97

    (18) METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .

    salto           reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    goto            reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    if              reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    fmt             reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    id              reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    func            reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    stack           reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    heap            reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    h               reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    p               reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    int             reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    temporal        reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    flotante        reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    menos           reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    $end            reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    return          reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)
    llavesc         reduce using rule 18 (METODO -> func main parentesisa parentesisc llavesa INSTRUCCIONES llavesc .)


state 98

    (32) GETSTACK -> stack corchetea int parentesisa DER parentesisc corchetec .

    igual           reduce using rule 32 (GETSTACK -> stack corchetea int parentesisa DER parentesisc corchetec .)
    puntocoma       reduce using rule 32 (GETSTACK -> stack corchetea int parentesisa DER parentesisc corchetec .)


state 99

    (33) GETHEAP -> heap corchetea int parentesisa DER parentesisc corchetec .

    igual           reduce using rule 33 (GETHEAP -> heap corchetea int parentesisa DER parentesisc corchetec .)
    puntocoma       reduce using rule 33 (GETHEAP -> heap corchetea int parentesisa DER parentesisc corchetec .)


state 100

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto . salto llavesc

    salto           shift and go to state 104


state 101

    (15) IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc . puntocoma

    puntocoma       shift and go to state 105


state 102

    (19) ICHAR -> int parentesisa . DER parentesisc
    (29) DER -> . IZQ
    (30) DER -> . h
    (31) DER -> . p
    (34) IZQ -> . int
    (35) IZQ -> . temporal
    (36) IZQ -> . flotante
    (37) IZQ -> . NEG
    (51) NEG -> . menos int
    (52) NEG -> . menos flotante

    h               shift and go to state 26
    p               shift and go to state 27
    int             shift and go to state 24
    temporal        shift and go to state 28
    flotante        shift and go to state 29
    menos           shift and go to state 31

    DER                            shift and go to state 106
    IZQ                            shift and go to state 14
    NEG                            shift and go to state 30

state 103

    (17) METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma . llavesc

    llavesc         shift and go to state 107


state 104

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto . llavesc

    llavesc         shift and go to state 108


state 105

    (15) IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .

    salto           reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    goto            reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    if              reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    fmt             reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    id              reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    func            reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    stack           reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    heap            reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    h               reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    p               reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    int             reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    temporal        reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    flotante        reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    menos           reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    $end            reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    return          reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)
    llavesc         reduce using rule 15 (IMPRESION -> fmt punto printf parentesisa TIPOCHAR coma ICHAR parentesisc puntocoma .)


state 106

    (19) ICHAR -> int parentesisa DER . parentesisc

    parentesisc     shift and go to state 109


state 107

    (17) METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .

    salto           reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    goto            reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    if              reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    fmt             reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    id              reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    func            reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    stack           reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    heap            reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    h               reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    p               reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    int             reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    temporal        reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    flotante        reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    menos           reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    $end            reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    return          reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)
    llavesc         reduce using rule 17 (METODO -> func id parentesisa parentesisc llavesa INSTRUCCIONES return puntocoma llavesc .)


state 108

    (13) CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .

    salto           reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    goto            reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    if              reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    fmt             reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    id              reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    func            reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    stack           reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    heap            reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    h               reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    p               reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    int             reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    temporal        reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    flotante        reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    menos           reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    $end            reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    return          reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)
    llavesc         reduce using rule 13 (CREARIF -> if parentesisa IZQ SIMBOLO IZQ parentesisc llavesa goto salto llavesc .)


state 109

    (19) ICHAR -> int parentesisa DER parentesisc .

    parentesisc     reduce using rule 19 (ICHAR -> int parentesisa DER parentesisc .)

